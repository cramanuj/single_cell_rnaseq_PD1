\NeedsTeXFormat{LaTeX2e}[1995/12/01]
%\documentclass[10pt]{bmc_article}
\documentclass[hidelinks,11pt]{article}
\linespread{1.5}
\title{Analyzing PD1+/PD1- groups - a single cell RNAseq experiment}
\author{Acharya C.R.}
\date{}

\usepackage[center]{caption}
\usepackage{bm}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsbsy}
\usepackage{amsfonts}
\usepackage{amscd}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{subfigure}
%\usepackage{subcaption}
\usepackage{hyperref}
\usepackage{float}
\restylefloat{figure,table}
\usepackage{array}
\usepackage{longtable}
\usepackage{pdflscape}
\usepackage{colortbl}
\usepackage{courier}
\usepackage{verbatim}
\usepackage{relsize,setspace}
\usepackage{tabularx,ragged2e,booktabs}
\usepackage{multicol}
\usepackage{empheq}
\usepackage{fancyhdr}
\pagestyle{fancyplain}
\fancyhf{}
\lhead{\fancyplain{}{}}
\rhead{\fancyplain{}{Acharya C.R.}}
\rfoot{\fancyplain{}{\thepage}}
\lfoot[\thepage]{}
\rfoot[]{\thepage}
\newcommand{\code}[1]{\texttt{\smaller #1}}
\newcommand{\R}{{\normalfont\textsf{R}}{}}
\parskip 1.25ex
\parindent 0ex
\textwidth 6.75in
\textheight 9.25in
\topmargin -.875in
\oddsidemargin -.125in
\evensidemargin -.125in  
\usepackage{multirow}
\usepackage{hhline}
\usepackage{color}
\usepackage{listings}
\usepackage[table]{xcolor}
\usepackage{textcomp}
\usepackage{breqn}
\usepackage{arydshln}
\definecolor{listinggray}{gray}{0.9}
\definecolor{lbcolor}{rgb}{0.9,0.9,0.9}
\usepackage{soul}
\usepackage{booktabs}% http://ctan.org/pkg/booktabs
\usepackage{txfonts}
\newcommand{\tabitem}{~~\llap{\textbullet}~~}

\usepackage{Sweave}
\SweaveOpts{width=8,height=5}

\newcolumntype{x}[1]{%
>{\centering\hspace{0pt}}p{#1}}%
                                             
\setkeys{Gin}{width=0.70 \textwidth} 		

\newcommand{\fig}[1]{\centerline{\includegraphics{#1}}}
\newcommand{\rpm}{\sbox0{$1$}\sbox2{$\scriptstyle\pm$}
  \raise\dimexpr(\ht0-\ht2)/2\relax\box2 }

\DeclareGraphicsExtensions{.pdf, .jpg, .png}

\begin{document}
\maketitle

<<echo=F>>=
options(width=80)
options(continue=" ")
@

This is a preliminary analysis of single cell RNAseq data generated by Dr. Kim Lyerly's Lab. The primary objective of this analysis is to perform differential gene expression analysis of two specific groups of cells sorted by the presence or absence of a cell surface marker, PD1.

\section*{Experimental design and data preprocessing}
All the cells from a single tumor within a single donor patient were extracted before they were sorted based on cell surface marker PD1 using flow cytometry into two groups -- PD1+ and PD1-. The samples were then sequenced to an initial depth of 1.5 million reads/cell on Illumina MiSeq or 2 million reads/cell Illumina HiSeq sequencers in the Douek lab's Genome Analysis Core (our collaborator).

There are a total of 370 samples, unpaired, with 186 grouped under PD1- and another 184 grouped under PD1+.

Raw data was aligned to human genome using STAR aligner and the transcript abundance (for each gene for each cell) was quantified using RSEM.  Gene expression matrix containing feature counts was then constructed. 

\section*{Data analysis -- LIMMA/VOOM approach}

\subsection*{Prepping the data}

Loading the required R packages --
<<keep.source=F>>=
lib.list = c("data.table","scater","edgeR","sva","limma","FactoMineR","factoextra","gtools","clusterProfiler","GSVA","gplots","ggplot2","calibrate","scran","limSolve")

for(i in 1:length(lib.list)){
if(any(installed.packages()[,1]==lib.list[i])){
                suppressMessages(library(lib.list[i],character.only=T))}else{
                source("http://bioconductor.org/biocLite.R");
                biocLite(lib.list[i]);
                suppressMessages(library(lib.list[i],character.only=T))};
}
@

Reading the annotation file for the gene expression features--

<<>>=
## READ FEATURE DATA
txid = read.delim("Homo_sapiens.GRCh38.79_table.txt",header=F)
txid = txid[,c(1:2)]
names(txid)[1:2]=c("ENSEMBL","GENEID")
head(txid)
## END READ FEATURE DATA
@

Reading the preprocessed gene expression raw count data matrix and keep those features with no zeros across all the samples (i.e. remove probes with zero counts across all samples) --

<<keep.source=F>>=
dat = fread("PD1_SingleCell_STAR_GeneCount_ExpressionTable060617.tsv",header=T,data.table=F)
rownames(dat) = dat[,1]
dat = dat[,-1]
dim(dat)
keep_feature = rowSums(dat > 0) > 0
dat = dat[keep_feature,]
dim(dat)
@

We can identify batch ids from the column labels (sample annotations). 

<<keep.source=F>>=
pd = c(paste("PD1_Neg_",1:92,sep=""),paste("PD1_Pos_",1:91,sep=""),paste("PD1_Neg_",93:186,sep=""),paste("PD1_Pos_",92:184,sep=""))
batch = c(rep(1,183),rep(2,length(pd)-183))
batch_info = data.frame("PD"=pd,"BATCH"=batch)
batch_info$PD = as.character(batch_info$PD)
batch_info = batch_info[match(colnames(dat),batch_info$PD),]
pheno = sapply(1:ncol(dat),function(i) unlist(strsplit(colnames(dat)[i],split="_"))[2])
batch_info$Pheno = pheno
batch_info$Pheno  = as.factor(batch_info$Pheno)
##
batch = as.factor(batch_info$BATCH)
pheno = as.factor(batch_info$Pheno)
##
@

\subsubsection*{Data normalization including batch correction}

As part of the normalization step, VOOM/LIMMA framework was applied on the raw counts, which involved the following steps -- 1) Compute the normalization factors using Trimmed Mean of M-values (TMM) method, which estimates scale factors between samples, 2) Convert the read counts to $log_2$-cpm values ready for linear modeling, and 3) quantile normalize the cpm values. 

This normalization method transforms the data from a negative binomial to an approximated normal distribution, which will allow us to use such methods as surrogate variable analysis (SVA) to remove any obvious batch effects in the data.  

But, first, filter out probes with missing signal in at 10 samples. 

<<>>=
y = DGEList(counts=dat);
dim(y)
keep = rowSums(cpm(y)>1) >= 10;
y = y[keep, , keep.lib.sizes=FALSE];
dim(y)
y = calcNormFactors(y,method=c("TMM"))
v = voom(y,normalize="quantile",plot=F)
datN = v$E
dim(datN)
@

Performing PCA on the normalized data --

<<>>=
res.pca = PCA(t(datN),graph=F)
pca = data.frame(res.pca$ind$coord[,1:2])
@

\begin{figure}[H]
\begin{center}
<<datNpca,fig=T>>=
print( fviz_screeplot(res.pca, ncp=10,addlabels=TRUE) )
@
\caption{Screeplot of variances against the top 10 principal component}
\end{center}
\end{figure}

PCA plots of the normalized data --

\begin{figure}[!ht]
\begin{minipage}[b]{0.5\linewidth}
\centering
<<pcaplot1, fig=T, keep.source=F, echo=F>>=
print( ggplot(pca,aes(x=pca[,1],y=pca[,2],color=batch)) + geom_point(colour="grey50", size = 4,show.legend = TRUE) + geom_point(size=2) + xlab("PC1") + ylab("PC2") + scale_color_discrete(name ="Batches") + theme(legend.position = "bottom") + scale_colour_manual(values= c("Red","Blue")) )
@
\caption{PCA plots -- batches}
\label{fig:pcaplot1}
\end{minipage}
%\hspace{0.05cm}
\begin{minipage}[b]{0.5\linewidth}
\centering
<<pcaplot2, fig=T, keep.source=F,echo=F>>=
print( ggplot(pca,aes(x=pca[,1],y=pca[,2],color=pheno)) + geom_point(colour="grey50", size = 4,show.legend = TRUE) + geom_point(size=2) + xlab("PC1") + ylab("PC2") + scale_color_discrete(name ="Phenotypes") + theme(legend.position = "bottom")+ guides(colour = guide_legend(override.aes = list(size=1))) )
@
\caption{PCA plots -- phenotypes}
\label{fig:fpcaplot2}
\end{minipage}
\end{figure}

Adjust the batch effects using surrogate variable analysis (SVA) model --

\begin{equation*}
\text{Gene Expression} \sim \text{Biological Covariates} + \text{Known Batch Effects} + \text{Unkown Variation} + \text{Measurement Error}
\end{equation*}

<<>>=
## Adjust data using SVA approach
mod = model.matrix(~Pheno,batch_info)
colnames(mod)[2]="Pheno"
sva_obj = sva(datN,mod)$sv
datC = t(resid(lm(t(datN) ~ sva_obj)))
#datC = removeBatchEffect(datN, batch=batch_info$BATCH)
#datC = ComBat(dat=datN, batch=batch_info$BATCH, mod=mod, par.prior=TRUE, prior.plots=F)
res.pca = PCA( t(datC), graph=F)
pca = data.frame(res.pca$ind$coord[,1:2])
@

PCA plots of the normalized and batch adjusted data --

\begin{figure}[H]
\begin{center}
<<datCpca,fig=T>>=
print( fviz_screeplot(res.pca, ncp=10,addlabels=TRUE) )
@
\caption{Screeplot of variances against the top 10 principal component}
\end{center}
\end{figure}

\begin{figure}[!ht]
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
print( ggplot(pca,aes(x=pca[,1],y=pca[,2],color=batch)) + geom_point(colour="grey50", size = 4,show.legend = TRUE) + geom_point(size=2) + xlab("PC1") + ylab("PC2") + scale_color_discrete(name ="Batches") + theme(legend.position = "bottom") + scale_colour_manual(values= c("Red","Blue")) )
@
\caption{PCA plots -- batches}
\label{fig:pcaplot1}
\end{minipage}
%\hspace{0.05cm}
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
print( ggplot(pca,aes(x=pca[,1],y=pca[,2],color=pheno)) + geom_point(colour="grey50", size = 4,show.legend = TRUE) + geom_point(size=2) + xlab("PC1") + ylab("PC2") + scale_color_discrete(name ="Phenotypes") + theme(legend.position = "bottom")+ guides(colour = guide_legend(override.aes = list(size=1))) )
@
\caption{PCA plots -- phenotypes}
\label{fig:pcaplot2}
\end{minipage}
\end{figure}

\subsection*{Differential expression analysis}

We find differentially expressed genes between PD1+/PD- cohorts by fitting a linear model using LIMMA.

<<>>=
mod = model.matrix(~Pheno,batch_info)
colnames(mod)[2]="Pheno"

fit = eBayes(lmFit(datC,mod))
top_gene_tab = topTable(fit,number=nrow(datC),coef="Pheno")
top_gene_tab$FC = logratio2foldchange(top_gene_tab$logFC,base=2)
txid2 = txid[match(rownames(top_gene_tab),txid[,1]),]
top_gene_tab= cbind(txid2,top_gene_tab)
topSIG = top_gene_tab[top_gene_tab$adj.P.Val<=0.05,]
topSIG = topSIG[order(topSIG$FC,decreasing=T),]
dim(topSIG)
head(topSIG)
sig_genes = as.character(topSIG$GENEID)
sig_genes = gsub(" ","",sig_genes)
@

A volcano plot of differentially expressed genes with log fold change on the horizontal axis and -log10 $p$~value on the vertical axis. 

\begin{figure}[!ht]
\begin{center}
<<fig=T,keep.source=F>>=
with(top_gene_tab, plot(logFC, -log10(P.Value), pch=20, main="", xlim=c(-5,5),xlab="LOG FOLD CHANGE",ylab="-log10 P VAL"))
with(subset(top_gene_tab, adj.P.Val<.05 ), points(logFC, -log10(P.Value), pch=20, col="red"))
with(subset(top_gene_tab, abs(logFC)>2), points(logFC, -log10(P.Value), pch=20, col="orange"))
with(subset(top_gene_tab, adj.P.Val<.05 & abs(logFC)>2), points(logFC, -log10(P.Value), pch=20, col="green"))
with(subset(top_gene_tab, adj.P.Val<1e-5 & abs(logFC)>2), textxy(logFC, -log10(P.Value), labs=GENEID, cex=.5))
@
\caption{Volcano scatter plot. Genes labeled in red have Benjamini-Hochberg adjusted $p$~value $<$ 0.05 and genes labeled in green have absolute logFC more than 2.}
\end{center}
\end{figure}

<<>>=
temp = txid[match(rownames(datC),txid[,1]),]
temp$GENEID = as.character(temp$GENEID)
temp$GENEID = gsub(" ","",temp$GENEID)
rownames(datC) = temp$GENEID
t = top_gene_tab[1:50,]
t = t[order(t$FC,decreasing=T),]
t$GENEID = as.character(t$GENEID)
t$GENEID = gsub(" ","",t$GENEID)
tempGENES = t$GENEID
tempD = datC[match(tempGENES,rownames(datC)),]
col.vec = c("#0000FF","#FF0000")[as.numeric(batch_info$Pheno)]
@

We visualize the expression patterns in PD1+ and PD1- groups with a heatmap. We performed complete linkage hierarchical clustering using Euclidean distance metric. Heatmap of top 50 differentially expressed genes --

\begin{figure}[!ht]
\begin{center}
<<keep.source=F,echo=F,fig=T,include=T,width=8,height=8>>=
heatmap.2(as.matrix(tempD),main="",col=bluered,scale="row",key=T,keysize=1.2,symkey=FALSE,density.info="none",ColSideColors=col.vec,dendrogram=c("column"),trace="none",cexCol=1,cexRow=0.8,labCol="",margins=c(12,12))
legend("bottomleft",legend=c("PD1_Neg","PD1_Pos"),fill=unique(col.vec),title="",bty="n",cex=0.6) 
@
\caption{Heatmap of the top 50 genes.}
\end{center}
\end{figure}

\section*{Data analysis -- deconvolution approach}

In our previous approach, size factors were computed from bulk data-based methods. Since, single cell RNA-seq data is dominated by low or zero counts, we pool counts from many cells to increase the count size for accurate size factor estimation. Pool-based size factors are then ``deconvolved" into cell-based factors for cell-specific normalization.

We make use of ``scater" package to compute size factors and any cells with zero size factors are removed from the analysis. 

<<>>=
pd = new("AnnotatedDataFrame", data = batch_info[,-1])
rownames(pd)=batch_info[,1]
gene_df = data.frame(Gene=rownames(dat))
rownames(gene_df) = gene_df$Gene
fd = new("AnnotatedDataFrame", data = gene_df)
sce = newSCESet(countData=dat,phenoData = pd,featureData = fd)
sce = calculateQCMetrics(sce)
sce = computeSumFactors(sce,positive=T)
summary(sizeFactors(sce))
@

The number of expressed features in each cell is defined as the number of features with non-zero counts for that cell. Any cell with very few expressed genes is likely to be of poor quality as the diverse transcript population has not been successfully captured.

\begin{figure}[!ht]
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
hist(sce$total_counts/1e6, xlab="Library sizes (millions)", main="", breaks=20, col="grey80", ylab="Number of cells")
@
\caption{Histograms of library size for all cells.}
\label{fig:histt1}
\end{minipage}
%\hspace{0.05cm} 
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
hist(sce$total_features, xlab="Number of expressed genes", main="", breaks=20, col="grey80", ylab="Number of cells")
@
\caption{Histogram of number of expressed genes for all cells.} 
\label{fig:histt2}
\end{minipage}
\end{figure}

<<keep.source=T>>=
libsize.drop = isOutlier(sce$total_counts, nmads=3, type="lower", log=TRUE)
feature.drop = isOutlier(sce$total_features, nmads=3, type="lower", log=TRUE)
@

About 33 samples did not pass the threshold. 

<<>>=
## Samples dropped
names(dat)[libsize.drop]

## Subsetting by column will retain only the high-quality cells that pass each filter described above.
sce_new = sce[,!(libsize.drop | feature.drop)]
keep = rowSums(counts(sce_new) > 0) > 10
sum(keep)
sce_new = sce_new[keep,]

## Compute size factors
sce_new = computeSumFactors(sce_new,positive=T)
summary(sizeFactors(sce_new))
@

%\begin{figure}[H]
%\begin{center}
%<<fig=T, keep.source=F,echo=F>>=
%plot(sizeFactors(sce_new), sce_new$total_counts/1e6, log="xy",ylab="Library size (millions)", xlab="Size factor")
%@
%\caption{Size factors from deconvolution after thresholding out some samples} \end{center}
%\end{figure}

\begin{figure}[H]
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
plot(sizeFactors(computeSumFactors(sce,positive=T)), sce$total_counts/1e6, log="xy",ylab="Library size (millions)", xlab="Size factor")
@
\caption{Size factors from deconvolution before thresholding out some samples}
\label{fig:hist1}
\end{minipage}
%\hspace{0.05cm} 
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
plot(sizeFactors(sce_new), sce_new$total_counts/1e6, log="xy",ylab="Library size (millions)", xlab="Size factor")
@
\caption{Size factors from deconvolution after thresholding out some samples} 
\label{fig:hist2}
\end{minipage}
\end{figure}

Principal component analysis of the count data --

\begin{figure}[H]
\begin{center}
<<fig=T,keep.source=F>>=
## An alternative approach to quality control is to perform a principal components analysis (PCA) based on the quality metrics for each cell, e.g., the total number of reads
plotPCA(sce_new,colour_by="Pheno",shape_by="BATCH") + theme(axis.text=element_text(size=12), axis.title=element_text(size=16))
@
\caption{PCA plot of the count data by batch and phenotype}
\end{center}
\end{figure}

We remove samples with zero size factor, normalize the data and removed batch effects. 
<<>>=
## Filter our samples
keep_samples = which(sizeFactors(sce_new)!=0)
sce_new = sce_new[,keep_samples]
dim(sce_new)
sceN = normalize.SCESet(sce_new)
table(sceN$BATCH,sceN$Pheno)

## Removing batch effects
datN = exprs(sceN)
datN = removeBatchEffect(datN, batch=sceN$BATCH)
@

PCA plots of the normalized and batch adjusted data --

%\begin{figure}[!ht]
%\begin{center}
%<<>>=
%batch_info1 = data.frame("Batch"=sceN$BATCH,"Pheno"=sceN$Pheno)
%pd1 = new("AnnotatedDataFrame", data = batch_info1)
%rownames(pd1)=colnames(datN)
%gene_df1= data.frame(Gene=rownames(datN))
%rownames(gene_df1) = gene_df1$Gene
%fd1 = new("AnnotatedDataFrame", data = gene_df1)
%sce_new1 = newSCESet(exprsData=datN,phenoData = pd1,featureData = fd1)
%plotPCA(sce_new1,colour_by="Pheno",shape_by="Batch") + theme(axis.text=element_text(size=12), axis.title=element_text(size=16))
%@
%\caption{PCA plot of the adjusted data} 
%\end{center}
%\end{figure}

<<echo=F>>=
res.pca = prcomp(t(datN))
pca1 = as.data.frame((t(datN) %*% res.pca$rotation))
sceN$BATCH = as.factor(sceN$BATCH)
sceN$Pheno = as.factor(sceN$Pheno)
@

\begin{figure}[!ht]
\begin{center}
<<fig=T>>=
print(fviz_screeplot(res.pca, ncp=10,addlabels=TRUE) )
@
\caption{Screeplot of variances against the top 10 principal component}
\end{center}
\end{figure}

\begin{figure}[!ht]
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
print(ggplot(pca1,aes(x=pca1[,1],y=pca1[,2],color=sceN$BATCH)) + geom_point(colour="grey50", size = 4,show.legend = TRUE) + geom_point(size=2) + xlab("PC1") + ylab("PC2") + scale_color_discrete(name ="") + theme(legend.position = "bottom") + guides(colour = guide_legend(override.aes = list(size=1))))
@
\caption{PCA plots -- batches}
\label{fig:}
\end{minipage}
%\hspace{0.05cm}
\begin{minipage}[b]{0.5\linewidth}
\centering
<<fig=T, keep.source=F,echo=F>>=
print(ggplot(pca1,aes(x=pca1[,1],y=pca1[,2],color=sceN$Pheno)) + geom_point(colour="grey50", size = 4,show.legend = TRUE) + geom_point(size=2) + xlab("PC1") + ylab("PC2") + scale_color_discrete(name ="") + theme(legend.position = "bottom")+ guides(colour = guide_legend(override.aes = list(size=1))))
@
\caption{PCA plots -- phenotypes} 
\label{fig:}
\end{minipage}
\end{figure}

Differential expression analysis was performed using LIMMA --

<<>>=
mod = model.matrix(~sce_new$Pheno)
colnames(mod)[2] = "Pheno"
fit = eBayes(lmFit(datN,mod))
top_gene_tab = topTable(fit,number=nrow(datN),coef="Pheno")
top_gene_tab$FC = logratio2foldchange(top_gene_tab$logFC,base=2)
txid2 = txid[match(rownames(top_gene_tab),txid[,1]),]
top_gene_tab= cbind(txid2,top_gene_tab)
topSIG = top_gene_tab[top_gene_tab$adj.P.Val<=0.05,]
topSIG = topSIG[order(topSIG$FC,decreasing=T),]
dim(topSIG)
head(topSIG)
sig_genes = as.character(topSIG$GENEID)
sig_genes = gsub(" ","",sig_genes)
@

A volcano plot of differentially expressed genes with log fold change on the horizontal axis and -log10 $p$~value on the vertical axis. 

\begin{figure}[!ht]
\centering
<<fig=T,keep.source=F>>=
with(top_gene_tab, plot(logFC, -log10(P.Value), pch=20, main="", xlim=c(-5,5),xlab="LOG FOLD CHANGE",ylab="-log10 P VAL"))
with(subset(top_gene_tab, adj.P.Val<.05 ), points(logFC, -log10(P.Value), pch=20, col="red"))
with(subset(top_gene_tab, abs(logFC)>2), points(logFC, -log10(P.Value), pch=20, col="orange"))
with(subset(top_gene_tab, adj.P.Val<.05 & abs(logFC)>2), points(logFC, -log10(P.Value), pch=20, col="green"))
with(subset(top_gene_tab, adj.P.Val<1e-5 & abs(logFC)>2), textxy(logFC, -log10(P.Value), labs=GENEID, cex=.5))
@
\caption{Volcano scatter plot. Genes labeled in red have Benjamini-Hochberg adjusted $p$~value $<$ 0.05 and genes labeled in green have absolute logFC more than 2.}
\end{figure}

<<>>=
temp = txid[match(rownames(datN),txid[,1]),]
temp$GENEID = as.character(temp$GENEID)
temp$GENEID = gsub(" ","",temp$GENEID)
rownames(datN) = temp$GENEID
t = top_gene_tab[1:50,]
t = t[order(t$FC,decreasing=T),]
t$GENEID = as.character(t$GENEID)
t$GENEID = gsub(" ","",t$GENEID)
tempGENES = t$GENEID
tempD = datN[match(tempGENES,rownames(datN)),]
col.vec = c("#0000FF","#FF0000")[as.numeric(sce_new$Pheno)]
@

We visualize the expression patterns in PD1+ and PD1- groups with a heatmap. We performed complete linkage hierarchical clustering using Euclidean distance metric. Heatmap of top 50 differentially expressed genes --

\begin{figure}[!ht]
\begin{center}
<<keep.source=F,echo=F,fig=T,include=T,width=8,height=8>>=
heatmap.2(as.matrix(tempD),main="",col=bluered,scale="row",key=T,keysize=1.2,symkey=FALSE,density.info="none",ColSideColors=col.vec, dendrogram=c("column"),trace="none",cexCol=1,cexRow=0.8,labCol="",margins=c(12,12))
legend("bottomleft",legend=c("PD1_Neg","PD1_Pos"),fill=unique(col.vec),title="",bty="n",cex=0.6) 
@
\caption{Heatmap of the top 50 genes.}
\end{center}
\end{figure}

\end{document}